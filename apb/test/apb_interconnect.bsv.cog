// see LICENSE.incore for more details on licensing terms
/*
Author: Neel Gala, neelgala@incoresemi.com
Created on: 

*/
package apb_interconnect;
import FIFOF        :: * ;
import Vector       :: * ;
import SpecialFIFOs :: * ;
import FIFOF        :: * ;
import Connectable  :: * ;

import apb          :: * ;

import Semi_FIFOF   :: * ;

`include "Logger.bsv"

#[[[cog
#  import cog
#  import yaml
#  import re
#  import sys
#  
#  yaml_path = 'apb_interconnect_config.yaml'
#  yaml_file = open(yaml_path, 'r')
#  config = yaml.safe_load(yaml_file)
#  
#  cog.outl ('`define wd_addr            ' + str(config['wd_addr']))
#  cog.outl ('`define wd_data            ' + str(config['wd_data']))
#  cog.outl ('`define wd_user            ' + str(config['wd_user']))
#  cog.outl ('`define tn_num_slaves      ' + str(config['tn_num_slaves']))
#  cog.outl ('`define tn_num_slaves_bits TLog#(`tn_num_slaves)')
#  
#  if len(config['memory_map']) != config['tn_num_slaves']:
#     raise Exception('tn_num_slaves does not match number of entries in memory map')
# 
#  for x in range(0,config['tn_num_slaves']):
#     if x not in config['memory_map']:
#         raise Exception ('Slot ' + str(x) + ' missing in memory-map ')
#     if config['memory_map'][x]['access'] != 'error':
#         if config['memory_map'][x]['base'] > 2**config['wd_addr']:
#             raise Exception ('Slot ' + str(x) + ' has mem map out of bounds')
#         
#  read_ports = 0
#
#  elseif_template = "  else if (wd_addr >= 'h{0} && wd_addr < 'h{1}) return {2};\n"
#  if_template = "  if (wd_addr >= 'h{0} && wd_addr < 'h{1}) return {2};\n"
#  else_template = "  else return {0};"
#  return_template = " return {0};"
#
#  fn_read_temp = '''
#  function Bit#(TMax#(`tn_num_slaves_bits,1)) fn_addr_map(Bit#(`wd_addr) wd_addr);
#  {0}
#  endfunction:fn_addr_map
#  '''
#  
#  read_func = ''
#  errorslave_found = False
#  
#  for slaves in config['memory_map']:
#      if config['memory_map'][slaves]['access'] == 'error':
#          if len(config['memory_map']) == 1:
#            else_template = return_template.format(slaves)
#          else:
#            else_template = else_template.format(slaves)
#          errorslave_found = True
#      else:
#          if (read_ports == 0 ):
#              read_func += if_template.format(\
#                   str(hex(config['memory_map'][slaves]['base']))[2:], \
#                   str(hex(config['memory_map'][slaves]['bound']))[2:], \
#                   slaves)
#          else:
#              read_func += elseif_template.format(\
#                   str(hex(config['memory_map'][slaves]['base']))[2:], \
#                   str(hex(config['memory_map'][slaves]['bound']))[2:], \
#                   slaves)
#          read_ports = read_ports + 1
# 
#  if not errorslave_found :
#      raise Exception ('No Error Slave found')
#
#  read_func += else_template
#  
#  cog.outl(fn_read_temp.format(read_func))
#  yaml_file.close()
#]]]
#[[[end]]]

(*synthesize, clock_prefix="PCLK", reset_prefix="PRESETN"*)
module mkapb_interconnect(Ifc_apb_fabric#(`wd_addr, `wd_data, `wd_user,  `tn_num_slaves ));
  let ifc();
  mkapb_fabric #(fn_addr_map) _temp(ifc);
  return (ifc);
endmodule:mkapb_interconnect

endpackage:apb_interconnect


